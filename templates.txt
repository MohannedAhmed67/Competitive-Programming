//Indexed_set
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> indexed_set;

//nCr with inv_fact
const int MOD = 1e9 + 7, MAX_N = 5e3 + 3;
ll fact[MAX_N];
ll inv_fact[MAX_N];

//Modular arithmetics
ll add(ll a, ll b) {
  return (a%MOD + b%MOD)%MOD;
}
 
ll sub(ll a, ll b){
  return (a%MOD - b%MOD + MOD)%MOD;
}

ll mul(ll a, ll b) {
  return (a%MOD * b%MOD)%MOD;
}

//Fast exponentiation method O(log(n)) with modulus
ll fp(ll x, ll y){
  if(y == 0) return 1;
  ll ret = fp(x, y/2);
  return y&1 ? mul(x, mul(ret, ret)) : mul(ret, ret);
}

//Factorial
void pre(){
    fact[0] = fact[1] = 1;
    inv_fact[0] = fp(fact[0], MOD - 2);
    inv_fact[1] = fp(fact[1], MOD - 2);
    for(ll i = 2; i < MAX_N; i++){
        fact[i] = (1LL * i * fact[i - 1]%MOD)%MOD;
        fact[i] %= MOD; 
        inv_fact[i] = fp(fact[i], MOD - 2);
    }
}

ll nCr(ll n, ll r){
    if((n - r) < 0 || n < 0 || r < 0){
        return 0;
    }

    ll ret = mul(fact[n], inv_fact[n - r]);
    ret = mul(ret, inv_fact[r]);
    return ret;
}

const int MOD = 998244353, MAX_N = 2e5 + 5;
ll fact[MAX_N];
ll spf[MAX_N];

//Factorial
void pre(){
  fact[0] = fact[1] = 1;
  for(int i = 2; i < MAX_N; i++){
    fact[i] = (1LL * i * fact[i - 1]%MOD)%MOD;
    fact[i] %= MOD; 
  }
}

//Sieve
//Sieve
void sieve() {
    spf[0] = spf[1] = 1;
    for(int i = 2; i < MAX_N; i++) spf[i] = i;
    for (int i = 2; i * i <= MAX_N; i++) {
        if (spf[i] == i) {
            for (int j = i * i; j < MAX_N; j += i) {
                if (spf[j] == j) spf[j] = i;
            }
        }
    }
}


//Primality checker
bool isPrimeNumber(ll n){
  if (n <= 1)
    return false;
  if (n <= 3)
    return true;
  if (n % 2 == 0 || n % 3 == 0)
    return false;
  for (ll i = 5; i * i <= n; i += 6)
    if (n % i == 0 || n % (i + 2) == 0)
      return false;
  return true;
}

//Modular arithmetics
ll add(ll a, ll b) {
  return (a%MOD + b%MOD)%MOD;
}
 
ll sub(ll a, ll b){
  return (a%MOD - b%MOD + MOD)%MOD;
}

ll mul(ll a, ll b) {
  return (a%MOD * b%MOD)%MOD;
}
 
//Fast exponentiation method O(log(n)) with modulus
ll fp(ll x, ll y){
  if(y == 0) return 1;
  ll ret = fp(x, y/2);
  return y&1 ? mul(x, mul(ret, ret)) : mul(ret, ret);
}

//Power of 2 checker
bool is_power_of_2(ll x){
  return (x == (x & (-x)));
}

//Number of high bits in the binary representation of a number
ll popcount(ll x){
  return __builtin_popcountll(x);
}

//The prime factor representation of a number
vector<pair<ll, ll>> fac(ll x){
  vector<pair<ll, ll>> ret;
  while(x > 1){
    if(ret.empty() || spf[x] != ret.back().first) ret.emplace_back(spf[x], 1);
    else ret.back().second += 1;
    x /= spf[x];
  }

  return ret;
}

//string hashing
#define ld long double

const int mod = 1e9 + 7, INF = 1e9 + 10;
const ld PI = acos(-1), eps = 1e-7;
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
ll rand(ll l, ll r) {
    return uniform_int_distribution<ll>(l, r)(rng);
}
 
const int mod1 = 1e9 + 7, mod2 = 1e9 + 9;
const int p1 = rand(1e7, 1e8), p2 = rand(1e7, 1e8);
const int N = 1e6 + 1;
vector<ll> pow1(N + 1), pow2(N + 1);
 
void init() {
    pow1[0] = pow2[0] = 1;
    for (int i = 1; i <= N; i++) {
        pow1[i] = p1 * pow1[i - 1] % mod1;
        pow2[i] = p2 * pow2[i - 1] % mod2;
    }
}
 
struct stringHashing {
    vector<ll> preHash1, preHash2, sufHash1, sufHash2;
 
    void init(string &s) {
        preHash1 = hash(s, preHash1, pow1, mod1);
        preHash2 = hash(s, preHash2, pow2, mod2);
        sufHash1 = hash(s, sufHash1, pow1, mod1, true);
        sufHash2 = hash(s, sufHash2, pow2, mod2, true);
    }
 
    vector<ll> hash(string &s, vector<ll> &h, vector<ll> &p, int m, bool rev = false) {
        int n = s.size();
        h.resize(n);
        int st = 0, en = n, delta = 1;
        if (rev)
            st = n - 1, en = -1, delta = -1;
        int i = 0;
        while (st != en) {
            h[st] = (s[st] - '0' + 1) * p[i] % m;
            if (i != 0) {
                h[st] += h[st - delta];
                if (h[st] >= m)
                    h[st] -= m;
            }
            st += delta;
            i++;
        }
        return h;
    }
 
    pair<ll, ll> query(int l, int r) {
        ll h1 = preHash1[r], h2 = preHash2[r];
        h1 -= (l == 0 ? 0 : preHash1[l - 1]);
        h2 -= (l == 0 ? 0 : preHash2[l - 1]);
        if (h1 < 0)h1 += mod1;
        if (h2 < 0)h2 += mod2;
        h1 = h1 * pow1[N - l] % mod1;
        h2 = h2 * pow2[N - l] % mod2;
        return {h1, h2};
    }
 
    pair<ll, ll> revQuery(int l, int r) {
        int n = sufHash1.size();
        ll h1 = sufHash1[l], h2 = sufHash2[l];
        h1 -= (r == (n - 1) ? 0 : sufHash1[r + 1]);
        h2 -= (r == (n - 1) ? 0 : sufHash2[r + 1]);
        if (h1 < 0)h1 += mod1;
        if (h2 < 0)h2 += mod2;
        h1 = h1 * pow1[N - n + r + 1] % mod1;
        h2 = h2 * pow2[N - n + r + 1] % mod2;
        return {h1, h2};
    }
};

//DSU
struct DSU {
    vector<int> par, siz;
 
    DSU(int n) {
        par.resize(n);
        siz.assign(n, 1);
        for(int i = 0; i < n; i++) par[i] = i;
    }
 
    int find(int x) {
        return x == par[x] ? x : par[x] = find(par[x]);
    }
 
    void merge(int u, int v) {
        u = find(u), v = find(v);
        if(u == v) return;
        if(siz[u] > siz[v]) swap(u, v);
        par[u] = v;
        siz[v] += siz[u];
        siz[u] = 0;
    }
};
 
int dx[4] = {-1, 1, 0, 0}, dy[4] = {0, 0, -1, 1};
 

 const int MOD = 1e9 + 7, MAX_N = 2e5 + 5;
ll fact[MAX_N];
 
void pre(){
  fact[0] = fact[1] = 1;
  for(int i = 2; i < MAX_N; i++){
    fact[i] = (1LL * i * fact[i - 1]%MOD)%MOD;
    fact[i] %= MOD; 
  }
}
 
//segtree
template <typename T> 
struct SegTree{
    int n;
    vector<T> pref, tree, lazy;

    SegTree(int n) : n(n), pref(n), tree(4 * n), lazy(4 * n) {}
    
    T merge(T x, T y){
        return max(x, y);
    }

    void build(int id, int ns, int ne){
        if(ns == ne){
            tree[id] = pref[ns];
            return; 
        }

        int mid = (ns + ne) >> 1;

        build(2 * id, ns, mid);
        build(2 * id + 1, mid + 1, ne);

        tree[id] = merge(tree[2 * id], tree[2 * id + 1]);
    }

    void push(int v){
        tree[2 * v] += lazy[v];
        tree[2 * v + 1] += lazy[v];
        lazy[2 * v] += lazy[v];
        lazy[2 * v + 1] += lazy[v];
        lazy[v] = 0;
    }

    void update_range(int l, int r, T val, int id, int ns, int ne){
        if(l > r){
            return;
        }

        if(l == ns && r == ne){
            tree[id] += val;
            lazy[id] += val;
        }
        else{
            push(id);
            int mid = (ns + ne) >> 1;
            update_range(l, min(r, mid), val, 2 * id, ns, mid);
            update_range(max(l, mid + 1), r, val, 2 * id + 1, mid + 1, ne);
            tree[id] = merge(tree[2 * id], tree[2 * id + 1]);
        }
    }

    void update(int ind, T val, int id, int ns, int ne){
        if(ns == ne){
            tree[id] = val;
            return;
        }

        int mid = (ns + ne) >> 1;
        if(ind <= mid){
            update(ind, val, 2 * id, ns, mid);
        }
        else{
            update(ind, val, 2 * id + 1, mid + 1, ne);
        }

        tree[id] = merge(tree[2 * id], tree[2 * id + 1]);
    }

    T query(int l, int r, int id, int ns, int ne){
        if(l > r){
            return 0;
        }

        if(l == ns && r == ne){
            return tree[id];
        }

        push(id);
        int mid = (ns + ne) >> 1;
        return merge(query(l, min(r, mid), 2 * id, ns, mid), query(max(l, mid + 1), r, 2 * id + 1, mid + 1, ne));
    }

    int find(int l, int r, T val, int id, int ns, int ne){
        if(l > ne || r < ns){
            return -1;
        }

        if(tree[id] < val){
            return -1;
        }
        
        if(ns == ne){
            return ns;
        }

        int L = 2 * id, R = 2 * id + 1;
        int mid = (ns + ne) >> 1;
        int ind = find(l, r, val, L, ns, mid);
        if(ind == -1){
            ind = find(l, r, val, R, mid + 1, ne);
        }

        return ind;
    }
};

//sparse table
const ll OO = 1e18 + 10, mod = 1e9 + 7, mod2 = 1e9 + 9, N = 1e6 + 6, M = 20, MOD = 998244353;
ll sp[N][M], a[N], lg[N], n;
 
void buildSparse() {
    lg[1] = 0;
    for (ll i = 2; i <= n; i++) {
        lg[i] = lg[i / 2] + 1;
    }
    for (ll i = 0; i < n; i++) {
        sp[i][0] = a[i];
    }
    for (ll i = 1; i < M; i++) {
        for (int j = 0; j + (1 << i) <= n; j++) {
            sp[j][i] = max(sp[j][i - 1], sp[j + (1 << (i - 1))][i - 1]);
        }
    }
}
 
ll queryMX(ll l, ll r) {
    if (l > r)
        return 0;
    ll j = lg[r - l + 1];
    return max(sp[l][j], sp[r - (1 << j) + 1][j]);
}

//Bridges of undirected graph
int n;
vector<vector<int>> adjList;
set<pair<int, int>> bridges;
vector<int> vis, tin, low;
int timer;
 
void dfs(int u,int p = -1){
    vis[u] = 1;
    tin[u] = low[u] = timer++;
    for(auto v: adjList[u]){
        if(v == p)continue;
        if(vis[v]){
            low[u] = min(low[u], tin[v]);
        }else{
            dfs(v, u);
            low[u] = min(low[u], low[v]);
            if(low[v] > tin[u]){
                bridges.insert({u, v});
            }
        }
    }
}
 
void findBridges(){
    timer = 0;
    vis.assign(n, 0);
    tin.assign(n, -1);
    low.assign(n, -1);
    bridges.clear();
    for(int i = 0;i < n;i++){
        if(!vis[i]){
            dfs(i);
        }
    }
}

//extended euclidean
ll xGCD(ll a, ll b, ll &x, ll &y) {
    if(b == 0) {
       x = 1;
       y = 0;
       return a;
    }

    ll x1, y1, gcd = xGCD(b, a % b, x1, y1);
    x = y1;
    y = x1 - (a / b) * y1;
    return gcd;
}

//dijkstra multisource
const int N = 1e5 + 5;
ll arr[N];
vector<array<ll, 2>> graph[N];
ll dist[N];
bool vis[N];
ll n, m;
ll mn = LLONG_MAX;
int l = -1, r = -1;
map<int, int> par;
 
void dijkstra_multisource(){
    priority_queue<array<ll, 2>, vector<array<ll, 2>>, greater<array<ll, 2>>> pq;
    for(int i = 1; i <= n; i++){
        if(arr[i]){
            dist[i] = 0;
            pq.push({0, i});
            par[i] = i;
        }
    }
 
    while(!pq.empty()){
        int u = pq.top()[1];
        pq.pop();
        for(auto &e: graph[u]){
            if(dist[e[0]] > dist[u] + e[1]){
                par[e[0]] = par[u];
                dist[e[0]] = dist[u] + e[1];
                pq.push({dist[e[0]], e[0]});
            }
        }
    }
}
 

//KMP 
vector<int> KMP(string& s) {
	int n = s.size();
	vector<int> lps(n);
	for (int i = 1; i < n; i++) {
		int j = lps[i - 1];
		while (j > 0 and s[j] != s[i])
			j = lps[j - 1];
 
		j += s[i] == s[j];
		lps[i] = j;
	}
	return fail;
}

//binary lifting and lca
const int MAX_N = 1e5 + 5, LOG_N = 21;
vector<int> graph[MAX_N];
int up[MAX_N][LOG_N];
int depth[MAX_N];

void dfs(int u, int v = -1){
    for(auto &e: graph[u]){
        if(e != v){
            depth[e] = depth[u] + 1;
            up[e][0] = u;
            for(int i = 1; i < LOG_N; i++){
                up[e][i] = up[up[e][i - 1]][i - 1];
            }

            dfs(e, u);
        }
    }
}

int lca(int u, int v){
    if(depth[u] < depth[v]){
        swap(u, v);
    }

    int k = depth[u] - depth[v];
    for(int i = LOG_N - 1; i >= 0; i--){
        if(k >> i & 1){
            u = up[u][i];
        }
    }

    if(u == v){
        return u;
    }

    for(int i = LOG_N - 1; i >= 0; i--){
        if(up[u][i] != up[v][i]){
            u = up[u][i];
            v = up[v][i];
        }
    }

    return up[u][0];
}

//z algorithm
vector<int> z(string s) {
    int n = s.size();
    vector<int> z(n);
    int x = 0, y = 0;
    for (int i = 1; i < n; i++) {
        z[i] = max(0,min(z[i-x],y-i+1));
        while (i+z[i] < n && s[z[i]] == s[i+z[i]]) {
            x = i; y = i+z[i]; z[i]++;
        }
}
return z; }

//Fenwick tree
template<typename T>
class FenwickTree {
public:
    FenwickTree(int n) : N(n) {
        bit.assign(N + 1, 0);
    }

    void add(int idx, T val) {
        while (idx < N) {
            bit[idx] += val;
            idx += idx & -idx;
        }
    }

    T query(int idx) const {
        T ret = 0;
        while (idx > 0) {
            ret += bit[idx];
            idx -= idx & -idx;
        }
        return ret;
    }

    T prefix(int l, int r) const {
        return query(r) - query(l - 1);
    }

private:
    int N;
    std::vector<T> bit;
};

//Centroid decomposition
struct CentroidDecomposition {
	vector<set<int>> tree; // it's not vector<vector<int>>!
	vector<int> dad;
	vector<int> sub;

	CentroidDecomposition(vector<set<int>> &tree) : tree(tree) {
		int n = tree.size();
		dad.resize(n);
		sub.resize(n);
		build(0, -1);
	}

	void build(int u, int p) {
		int n = dfs(u, p); // find the size of each subtree
		int centroid = dfs(u, p, n); // find the centroid
		if (p == -1) p = centroid; // dad of root is the root itself
		dad[centroid] = p;

		// for each tree resulting from the removal of the centroid
		for (auto v : tree[centroid])
			tree[centroid].erase(v), // remove the edge to disconnect
			tree[v].erase(centroid), // the component from the tree
			build(v, centroid);
	}

	int dfs(int u, int p) {
		sub[u] = 1;

		for (auto v : tree[u])
			if (v != p) sub[u] += dfs(v, u);

		return sub[u];
	}

	int dfs(int u, int p, int n) {
		for (auto v : tree[u])
			if (v != p and sub[v] > n/2) return dfs(v, u, n);

		return u;
	}

	int operator[](int i) {
		return dad[i];
	}
};

//matrix multiplication
MOD = 998244353
 
def add(a, b):
    return (a % MOD + b % MOD) % MOD
 
def sub(a, b):
    return (a % MOD - b % MOD + MOD) % MOD
 
def mul(a, b):
    return (a % MOD * b % MOD) % MOD
 
def multiply(A, B):
    C = [[0, 0], [0, 0]]
    for i in range(2):
        for j in range(2):
            for k in range(2):
                C[i][j] = add(C[i][j], mul(A[i][k], B[k][j]))
    return C
 
def fp(x, y):
    if y == 0:
        return 1
    ret = fp(x, y // 2)
    if y % 2 == 1:
        return mul(x, mul(ret, ret))
    else:
        return mul(ret, ret)
 
def power(M, expo):
    if expo == 0:
        return [[1, 0], [0, 1]]
    ret = power(M, expo // 2)
    if expo % 2 == 1:
        return multiply(M, multiply(ret, ret))
    else:
        return multiply(ret, ret)

// Function to get cofactor of A[p][q] in temp[][]. n is
// current dimension of A[][]
void getCofactor(const vector<vector<int> >& A,
                 vector<vector<int> >& temp, int p, int q,
                 int n)
{
    int i = 0, j = 0;

    // Looping for each element of the matrix
    for (int row = 0; row < n; row++) {
        for (int col = 0; col < n; col++) {
            // Copying into temporary matrix only those
            // element which are not in given row and column
            if (row != p && col != q) {
                temp[i][j++] = A[row][col];

                // Row is filled, so increase row index and
                // reset col index
                if (j == n - 1) {
                    j = 0;
                    i++;
                }
            }
        }
    }
}

/* Recursive function for finding determinant of matrix.
n is current dimension of A[][]. */
int determinant(const vector<vector<int> >& A, int n)
{
    int D = 0; // Initialize result

    // Base case : if matrix contains single element
    if (n == 1)
        return A[0][0];

    vector<vector<int> > temp(
        N, vector<int>(N)); // To store cofactors

    int sign = 1; // To store sign multiplier

    // Iterate for each element of first row
    for (int f = 0; f < n; f++) {
        // Getting Cofactor of A[0][f]
        getCofactor(A, temp, 0, f, n);
        D += sign * A[0][f] * determinant(temp, n - 1);

        // terms are to be added with alternate sign
        sign = -sign;
    }

    return D;
}

// Function to get adjoint of A[N][N] in adj[N][N].
void adjoint(const vector<vector<int> >& A,
             vector<vector<int> >& adj)
{
    if (N == 1) {
        adj[0][0] = 1;
        return;
    }

    // temp is used to store cofactors of A[][]
    int sign = 1;
    vector<vector<int> > temp(N, vector<int>(N));

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            // Get cofactor of A[i][j]
            getCofactor(A, temp, i, j, N);

            // sign of adj[j][i] positive if sum of row
            // and column indexes is even.
            sign = ((i + j) % 2 == 0) ? 1 : -1;

            // Interchanging rows and columns to get the
            // transpose of the cofactor matrix
            adj[j][i] = (sign) * (determinant(temp, N - 1));
        }
    }
}

// Function to calculate and store inverse, returns false if
// matrix is singular
bool inverse(const vector<vector<int> >& A,
             vector<vector<float> >& inv)
{
    // Find determinant of A[][]
    int det = determinant(A, N);
    if (det == 0) {
        cout << "Singular matrix, can't find its inverse";
        return false;
    }

    // Find adjoint
    vector<vector<int> > adj(N, vector<int>(N));
    adjoint(A, adj);

    // Find Inverse using formula "inverse(A) =
    // adj(A)/det(A)"
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            inv[i][j] = adj[i][j] / float(det);

    return true;
}

vector<int> sort_cyclic_shifts(string const& s) {
    int n = s.size();
    const int alphabet = 256;
    vector<int> p(n), c(n), cnt(max(alphabet, n), 0);
    for (int i = 0; i < n; i++)
        cnt[s[i]]++;
    for (int i = 1; i < alphabet; i++)
        cnt[i] += cnt[i-1];
    for (int i = 0; i < n; i++)
        p[--cnt[s[i]]] = i;
    c[p[0]] = 0;
    int classes = 1;
    for (int i = 1; i < n; i++) {
        if (s[p[i]] != s[p[i-1]])
            classes++;
        c[p[i]] = classes - 1;
    }
    vector<int> pn(n), cn(n);
    for (int h = 0; (1 << h) < n; ++h) {
        for (int i = 0; i < n; i++) {
            pn[i] = p[i] - (1 << h);
            if (pn[i] < 0)
                pn[i] += n;
        }
        fill(cnt.begin(), cnt.begin() + classes, 0);
        for (int i = 0; i < n; i++)
            cnt[c[pn[i]]]++;
        for (int i = 1; i < classes; i++)
            cnt[i] += cnt[i-1];
        for (int i = n-1; i >= 0; i--)
            p[--cnt[c[pn[i]]]] = pn[i];
        cn[p[0]] = 0;
        classes = 1;
        for (int i = 1; i < n; i++) {
            pair<int, int> cur = {c[p[i]], c[(p[i] + (1 << h)) % n]};
            pair<int, int> prev = {c[p[i-1]], c[(p[i-1] + (1 << h)) % n]};
            if (cur != prev)
                ++classes;
            cn[p[i]] = classes - 1;
        }
        c.swap(cn);
    }
    return p;
}

vector<int> suffix_array_construction(string s) {
    s += "$";
    vector<int> sorted_shifts = sort_cyclic_shifts(s);
    sorted_shifts.erase(sorted_shifts.begin());
    return sorted_shifts;
}

vector<int> lcp_construction(string const& s, vector<int> const& p) {
    int n = s.size();
    vector<int> rank(n, 0);
    for (int i = 0; i < n; i++)
        rank[p[i]] = i;

    int k = 0;
    vector<int> lcp(n-1, 0);
    for (int i = 0; i < n; i++) {
        if (rank[i] == n - 1) {
            k = 0;
            continue;
        }
        int j = p[rank[i] + 1];
        while (i + k < n && j + k < n && s[i+k] == s[j+k])
            k++;
        lcp[rank[i]] = k;
        if (k)
            k--;
    }
    return lcp;
}

//Treap
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
 
 
typedef long long ll;
 
template<class T> using ordered_set = tree<T, null_type , less<T> , rb_tree_tag , tree_order_statistics_node_update>;
 
const ll lmax = 9223372036854775807;
const ll N = 1e9 + 7;
 
 
struct Treap{
    int len;
    const int ADD = 1000010;
    const int MAXVAL = 1000000010;
    tr1::unordered_map <long long, int, custom_hash> mp; /// Change to int if only int in treap
    tree<long long, null_type, less<long long>, rb_tree_tag, tree_order_statistics_node_update> T;
 
    Treap(){
        len = 0;
        T.clear(), mp.clear();
    }
 
    inline void clear(){
        len = 0;
        T.clear(), mp.clear();
    }
 
    inline void insert(long long x){
        len++, x += MAXVAL;
        int c = mp[x]++;
        T.insert((x * ADD) + c);
    }
 
    inline void erase(long long x){
        x += MAXVAL;
        int c = mp[x];
        if (c){
            c--, mp[x]--, len--;
            T.erase((x * ADD) + c);
        }
    }
 
    /// 1-based index, returns the K'th element in the treap, -1 if none exists
    inline long long kth(int k){
        if (k < 1 || k > len) return -1;
        auto it = T.find_by_order(--k);
        return ((*it) / ADD) - MAXVAL;
    }
 
    /// Count of value < x in treap
    inline int count(long long x){
        x += MAXVAL;
        int c = mp[--x];
        return (T.order_of_key((x * ADD) + c));
    }
 
    /// Number of elements in treap
    inline int size(){
        return len;
    }
};